R"(

#version 330 core

in vec2 UV;
in vec3 normal;
in vec3 surfacePos;
in vec3 surfaceToCamera;
in float fogAmount;

uniform sampler2D diffuseTexture;
uniform vec3 MaterialEmissiveColor;
uniform vec3 MaterialDiffuseColor;
uniform vec3 MaterialSpecularColor;
uniform vec3 MaterialAmbientColor;
float materialShininess = 0.95;

out vec4 color;

const vec4 fogColor = vec4(1.0,1.0,1.0,1.0);

/* Lighting */
#define MAX_LIGHTS 10
uniform int numLights;
uniform struct Light {
   vec4 position;
   vec3 intensities;
   float attenuation;
   float ambientCoefficient;
   float coneAngle;
   vec3 coneDirection;
} allLights[MAX_LIGHTS];

vec3 ApplyLight(Light light, vec3 surfaceColor) {
	vec3 surfaceToLight;
	float attenuation = 1.0;
	if(light.position.w == 0.0) {
		//directional light
		surfaceToLight = normalize(light.position.xyz);
		attenuation = 1.0; //no attenuation for directional lights
	} else {
		//point light
		surfaceToLight = normalize(light.position.xyz - surfacePos);
		float distanceToLight = length(light.position.xyz - surfacePos);
		attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2));

		//cone restrictions (affects attenuation)
		float lightToSurfaceAngle = degrees(acos(dot(-surfaceToLight, normalize(light.coneDirection))));
		if(lightToSurfaceAngle > light.coneAngle){
			attenuation = 0.0;
		}
	}

	//ambient
	vec3 ambient = light.ambientCoefficient * MaterialAmbientColor * surfaceColor.rgb * light.intensities;

	//diffuse
	float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
	vec3 diffuse = diffuseCoefficient * MaterialDiffuseColor * surfaceColor.rgb * light.intensities;

	//specular
	float specularCoefficient = 0.0;
	if(diffuseCoefficient > 0.0)
		specularCoefficient = pow(max(0.0, dot(surfaceToCamera, reflect(-surfaceToLight, normal))), materialShininess);
	vec3 specular = specularCoefficient * MaterialSpecularColor * light.intensities;

	//linear color (color before gamma correction)
	return MaterialEmissiveColor + ambient + attenuation*(diffuse + specular);
}

void main() {
    vec4 surfaceColor = texture(diffuseTexture, UV);
	
	if(numLights>0) {
		//combine color from all the lights
		vec3 linearColor = vec3(0);
		for(int i = 0; i < numLights; ++i){
			linearColor += ApplyLight(allLights[i], surfaceColor.rgb);
		}
		
		//final color (after gamma correction)
		vec3 gamma = vec3(1.0/2.2);
		vec4 lightColor = vec4(pow(linearColor, gamma), surfaceColor.a);
		color = mix(fogColor, lightColor, fogAmount);
	} else {
		//Debug
		color = vec4(MaterialEmissiveColor + MaterialAmbientColor * MaterialDiffuseColor * surfaceColor.rgb, surfaceColor.a);
	}
}

)"