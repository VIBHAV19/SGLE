R"(

#version 330 core
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;
layout(location = 3) in vec3 vertexWeights;
layout(location = 4) in ivec3 vertexBoneIds;

out vec2 UV;
out vec3 normal;
out vec3 surfacePos;
out vec3 surfaceToCamera;
out float fogAmount;

uniform mat4 V;
uniform mat4 M;
uniform mat4 P;
uniform vec3 C;
uniform float fogDensity;

//Too many bones can lead to wasted memory and in some cases, insufficient memory
uniform bool hasBones;
uniform mat4 bones[150];

void main() {
	UV = vertexUV;
	
	mat4 mskin = mat4(1.0);
	
	//If skinning is enabled, calculate bone matrix
	if(hasBones) {
		mskin	=	bones[vertexBoneIds.x]*vertexWeights.x+
					bones[vertexBoneIds.y]*vertexWeights.y+
					bones[vertexBoneIds.z]*vertexWeights.z;
	}
	
	//Vertex Position
	vec4 vtxP = vec4(vertexPosition_modelspace, 1.0);
	gl_Position = P * V * M * mskin * vtxP;
	
	//Light and color
	normal = normalize(M * mskin * vec4(vertexNormal_modelspace,0)).xyz;
    surfacePos = vec3(M * mskin * vtxP);
    surfaceToCamera = normalize(C - surfacePos);
	
	//Calculate Fog
	fogAmount = 1.0 / exp(abs((V * M * mskin * vtxP).z) * fogDensity);
	fogAmount = clamp(fogAmount, 0.0, 1.0);
}

)"